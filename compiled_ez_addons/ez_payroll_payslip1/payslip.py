from odoo import api,fields,models,tools,_
from odoo.exceptions import ValidationError
from odoo.modules.module import get_module_resource
import odoo.addons.decimal_precision as dp
from datetime import datetime
from dateutil.relativedelta import relativedelta
import logging
_logger=logging.getLogger(__name__)
from odoo.tools.misc import xlwt
from io import StringIO,BytesIO
class Payslip(models.Model):
	_inherit='hr.ph.payslip'
	@api.model
	def get_taxes(self,payslip_id):A=.0;B=payslip_id,'WTAX';self.env.cr.execute('SELECT SUM(amount) FROM hr_ph_pay_deduction WHERE payslip_id=%s AND code=%s',B);A=self.env.cr.fetchone()[0]or .0;return A
	@api.model
	def get_breakdowns(self):B=self;B.ensure_one();C=B.get_earnings();D=B.get_deductions_before_tax();A=max(len(C[0]),len(C[1]),len(D[0]),len(D[1]));_balance(A,C[0]);_balance(A,C[1]);_balance(A,D[0]);_balance(A,D[1]);E=B.get_deductions_after_tax();F=B.get_employer_benefits();A=max(len(E[0]),len(E[1]),len(F[0]),len(F[1]));_balance(A,E[0]);_balance(A,E[1]);_balance(A,F[0]);_balance(A,F[1]);return{'earnings':C,'ded_b4_tax':D,'ded_after_tax':E,'employer_benefits':F}
	@api.model
	def get_earnings(self):A=self;A.ensure_one();B=A.id,;A.env.cr.execute('\n            SELECT name, amount\n            FROM hr_ph_pay_computation\n            WHERE payslip_id=%s \n            ORDER BY seq, name',B);C=A.env.cr.dictfetchall();B=A.employee_id.id,fields.Date.to_string(A.payroll_id.date_to),A.year;A.env.cr.execute("\n            SELECT pc.name,\n                MIN(pc.seq) as seq, \n                SUM(pc.amount) as amount\n            FROM hr_ph_pay_computation AS pc\n            INNER JOIN hr_ph_payslip AS ps\n                ON ps.id = pc.payslip_id\n            WHERE \n                ps.employee_id = %s\n                AND ps.date_to <= %s\n                AND ps.year = %s\n                AND ps.state != 'draft'\n            GROUP BY 1 \n            ORDER BY seq, name",B);D=A.env.cr.dictfetchall();E=sum([A['amount']for A in C]);F=sum([A['amount']for A in D]);return C,D,E,F
	@api.model
	def get_deductions_before_tax(self):A=self;A.ensure_one();B=A.id,'WTAX';A.env.cr.execute('\n            SELECT name, amount\n            FROM hr_ph_pay_deduction\n            WHERE payslip_id=%s \n                AND code!=%s \n                AND tax_deductible\n            ORDER BY seq, name',B);C=A.env.cr.dictfetchall();B=A.employee_id.id,fields.Date.to_string(A.payroll_id.date_to),A.year,'WTAX';A.env.cr.execute("\n            SELECT ded.name,\n                MIN(ded.seq) as seq, \n                SUM(ded.amount) as amount\n            FROM hr_ph_pay_deduction AS ded\n            INNER JOIN hr_ph_payslip AS ps\n                ON ps.id = ded.payslip_id\n            WHERE \n                ps.employee_id = %s\n                AND ps.date_to <= %s\n                AND ps.year = %s\n                AND ps.state != 'draft'\n                AND ded.code != %s \n                AND ded.tax_deductible\n            GROUP BY 1 \n            ORDER BY seq, name",B);D=A.env.cr.dictfetchall();E=sum([A['amount']for A in C]);F=sum([A['amount']for A in D]);return C,D,E,F
	@api.model
	def get_deductions_after_tax(self):
		A=self;A.ensure_one();B=A.id,'WTAX';A.env.cr.execute("\n            SELECT name, amount\n            FROM hr_ph_pay_deduction\n            WHERE payslip_id = %s\n                AND (COALESCE(code, 'x') != %s)\n                AND NOT tax_deductible\n            ORDER BY seq, name",B);E=A.env.cr.dictfetchall();B=A.id,;A.env.cr.execute("\n            SELECT \n                SPLIT_PART(name,' - ',1) AS name, \n                amount\n            FROM hr_ph_loan_payment\n            WHERE payslip_id = %s\n            ORDER BY seq, name",B);E+=A.env.cr.dictfetchall();B=A.employee_id.id,fields.Date.to_string(A.payroll_id.date_to),A.year,'WTAX';A.env.cr.execute("\n            SELECT ded.name,\n                MIN(100000+ded.seq) as seq, \n                SUM(ded.amount) as amount\n            FROM hr_ph_pay_deduction AS ded\n            INNER JOIN hr_ph_payslip AS ps\n                ON ps.id = ded.payslip_id\n            WHERE \n                ps.employee_id = %s\n                AND ps.date_to <= %s\n                AND ps.year = %s\n                AND ps.state != 'draft'\n                AND (COALESCE(ded.code, 'x') != %s)\n                AND NOT ded.tax_deductible\n            GROUP BY 1 \n            ORDER BY seq, name",B);F=A.env.cr.dictfetchall();B=A.employee_id.id,fields.Date.to_string(A.payroll_id.date_to),A.year;A.env.cr.execute("\n            SELECT \n                SPLIT_PART(p.name,' - ',1) AS name, \n                MIN(100000+p.seq) AS seq, \n                SUM(p.amount) AS amount\n            FROM hr_ph_loan_payment AS p\n            INNER JOIN hr_ph_payslip AS ps\n                ON ps.id = p.payslip_id\n            WHERE \n                ps.employee_id = %s\n                AND ps.date_to <= %s\n                AND ps.year = %s\n                AND ps.state != 'draft'\n            GROUP BY 1 \n            ORDER BY seq, name",B);F+=A.env.cr.dictfetchall();D={}
		for C in F:
			if C['name']not in D:D[C['name']]={'name':C['name'],'seq':C['seq'],'amount':.0}
			D[C['name']]['amount']+=C['amount']
		G=sorted([D[A]for A in D],key=lambda i:i['seq']);H=sum([A['amount']for A in E]);I=sum([A['amount']for A in G]);return E,G,H,I
	@api.model
	def get_employer_benefits(self):A=self;A.ensure_one();B=A.id,'WTAX';A.env.cr.execute('\n            SELECT \n                name, \n                er_amount AS amount\n            FROM hr_ph_pay_deduction\n            WHERE payslip_id = %s \n                AND code != %s \n                AND er_amount != 0.0\n            ORDER BY seq, name',B);C=A.env.cr.dictfetchall();B=A.employee_id.id,fields.Date.to_string(A.payroll_id.date_to),A.year,'WTAX';A.env.cr.execute("\n            SELECT ded.name,\n                MIN(ded.seq) as seq, \n                SUM(ded.er_amount) as amount\n            FROM hr_ph_pay_deduction AS ded\n            INNER JOIN hr_ph_payslip AS ps\n                ON ps.id = ded.payslip_id\n            WHERE \n                ps.employee_id = %s\n                AND ps.date_to <= %s\n                AND ps.year = %s\n                AND ps.state != 'draft'\n                AND ded.code != %s \n                AND ded.tax_deductible\n            GROUP BY 1 \n            ORDER BY seq, name",B);D=A.env.cr.dictfetchall();E=sum([A['amount']for A in C]);F=sum([A['amount']for A in D]);return C,D,E,F
def _balance(n,recs):
	A=len(recs)
	while A<n:recs.append({'name':' ','amount':.0});A+=1